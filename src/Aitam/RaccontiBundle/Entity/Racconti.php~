<?php

namespace Aitam\RaccontiBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * Racconti
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="Aitam\RaccontiBundle\Entity\RaccontiRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Racconti {

    /**
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    protected $id;

    /**
     * @Assert\Length(
     *      min = "2",
     *      max = "50",
     *      minMessage = "Il nome deve essere lungo almeno {{ limit }} carattere.|Il nome deve essere lungo almeno {{ limit }} caratteri.",
     *      maxMessage = "Il nome non può essere più lungo di {{ limit }} carattere.|Il nome non può essere più lungo di {{ limit }} caratteri."
     * )
     * @Assert\NotBlank()
     * @ORM\Column(name="autore", type="string", length=50, nullable=true)
     */
    protected $autore;

    /**
     * @Assert\Length(
     *      min = "250",
     *      max = "3000",
     *      minMessage = "la descrizione deve essere lungo almeno {{ limit }} carattere.|Il nome deve essere lungo almeno {{ limit }} caratteri.",
     *      maxMessage = "la descrizione non può essere più lungo di {{ limit }} carattere.|Il nome non può essere più lungo di {{ limit }} caratteri."
     * )
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="descrizione", type="text", nullable=true)
     */
    protected $descrizione;

    /**
     * @var string
     * @Assert\Length(
     *      min = "30",
     *      max = "250",
     *      minMessage = "la descrizione breve deve essere lungo almeno {{ limit }} carattere.|Il nome deve essere lungo almeno {{ limit }} caratteri.",
     *      maxMessage = "la descrizione breve non può essere più lungo di {{ limit }} carattere.|Il nome non può essere più lungo di {{ limit }} caratteri."
     * )
     * @Assert\NotBlank()
     * @ORM\Column(name="descrizionebreve", type="string", length=255, nullable=true)
     */
    protected $descrizionebreve;

    /**
     * @var string
     *
     * @ORM\Column(name="tipo", type="string", length=255, nullable=true)
     */
    protected $tipo;

    /**
     * @Assert\Length(
     *      min = "2",
     *      max = "50",
     *      minMessage = "Il titolo deve essere lungo almeno {{ limit }} carattere.|Il nome deve essere lungo almeno {{ limit }} caratteri.",
     *      maxMessage = "Il titolo non può essere più lungo di {{ limit }} carattere.|Il nome non può essere più lungo di {{ limit }} caratteri."
     * )
     * @var string
     * @Assert\NotBlank()
     * @ORM\Column(name="titolo", type="string", length=50, nullable=false)
     */
    protected $titolo;

    /**
     * @var datetime $created
     *
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(name="created", type="datetime", nullable=false)
     */
    protected $created;

    /**
     * @var datetime $updated
     *
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(name="updated", type="datetime", nullable=true)
     */
    protected $updated;

    /**
     * @var boolean
     *
     * @ORM\Column(name="isactive", type="boolean", nullable=true)
     */
    protected $isactive;

    /**
     * @ORM\Column(name="images1", nullable=true)
     */
    protected $images1;

    /**
     * @ORM\Column(name="images2", nullable=true)
     */
    protected $images2;

    /**
     * @ORM\Column(name="images3", nullable=true)
     */
    protected $images3;

    /**
     * @ORM\Column(name="images4", nullable=true)
     */
    protected $images4;

    /**
     * @ORM\Column(name="images5", nullable=true)
     */
    protected $images5;

    /**
     * @Assert\NotBlank()
     * @Assert\Image(
     *     minWidth = 100,
     *     maxWidth = 1200,
     *     minHeight = 100,
     *     maxHeight = 1200
     * )
     * @Assert\File(maxSize="1000000")
     */
    public $file1;

    /**
     * @Assert\Image(
     *     minWidth = 100,
     *     maxWidth = 1200,
     *     minHeight = 100,
     *     maxHeight = 1200
     * )
     * @Assert\NotBlank()
     * @Assert\File(maxSize="1000000")
     */
    public $file2;

    /**
     * @Assert\Image(
     *     minWidth = 100,
     *     maxWidth = 1200,
     *     minHeight = 100,
     *     maxHeight = 1200
     * )
     * @Assert\NotBlank()
     * @Assert\File(maxSize="1000000")
     */
    public $file3;

    /**
     * @Assert\Image(
     *     minWidth = 100,
     *     maxWidth = 1200,
     *     minHeight = 100,
     *     maxHeight = 1200
     * )
     * @Assert\NotBlank()
     * @Assert\File(maxSize="1000000")
     */
    public $file4;

    /**
     * @Assert\Image(
     *     minWidth = 100,
     *     maxWidth = 1200,
     *     minHeight = 100,
     *     maxHeight = 1200
     * )
     * @Assert\NotBlank()
     * @Assert\File(maxSize="1000000")
     */
    public $file5;

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set autore
     *
     * @param string $autore
     * @return Racconti
     */
    public function setAutore($autore) {
        $this->autore = $autore;

        return $this;
    }

    /**
     * Get autore
     *
     * @return string 
     */
    public function getAutore() {
        return $this->autore;
    }

    /**
     * Set descrizione
     *
     * @param string $descrizione
     * @return Racconti
     */
    public function setDescrizione($descrizione) {
        $this->descrizione = $descrizione;

        return $this;
    }

    /**
     * Get descrizione
     *
     * @return string 
     */
    public function getDescrizione() {
        return $this->descrizione;
    }

    /**
     * Set descrizionebreve
     *
     * @param string $descrizionebreve
     * @return Racconti
     */
    public function setDescrizionebreve($descrizionebreve) {
        $this->descrizionebreve = $descrizionebreve;

        return $this;
    }

    /**
     * Get descrizionebreve
     *
     * @return string 
     */
    public function getDescrizionebreve() {
        return $this->descrizionebreve;
    }

    /**
     * Set tipo
     *
     * @param string $tipo
     * @return Racconti
     */
    public function setTipo($tipo) {
        $this->tipo = $tipo;

        return $this;
    }

    /**
     * Get tipo
     *
     * @return string 
     */
    public function getTipo() {
        return $this->tipo;
    }

    /**
     * Set titolo
     *
     * @param string $titolo
     * @return Racconti
     */
    public function setTitolo($titolo) {
        $this->titolo = $titolo;

        return $this;
    }

    /**
     * Get titolo
     *
     * @return string 
     */
    public function getTitolo() {
        return $this->titolo;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     * @return Racconti
     */
    public function setCreated($created) {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime 
     */
    public function getCreated() {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     * @return Racconti
     */
    public function setUpdated($updated) {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime 
     */
    public function getUpdated() {
        return $this->updated;
    }

    /**
     * Set isactive
     *
     * @param boolean $isactive
     * @return Racconti
     */
    public function setIsactive($isactive) {
        $this->isactive = $isactive;

        return $this;
    }

    /**
     * Get isactive
     *
     * @return boolean 
     */
    public function getIsactive() {
        return $this->isactive;
    }

    public function getAbsolutePath() {
        return null === $this->images ? null : $this->getUploadRootDir() . '/' . $this->images;
    }

    public function getWebPath() {
        return null === $this->images ? null : $this->getUploadDir() . '/' . $this->images;
    }

    protected function getUploadRootDir() {
        // the absolute directory path where uploaded documents should be saved
        return __DIR__ . '/../../../../web/' . $this->getUploadDir();
    }

    protected function getUploadDir() {
        // get rid of the __DIR__ so it doesn't screw when displaying uploaded doc/image in the view.
        return '/bundles/raccontibundle/immagini';
    }

    /**
     * @ORM\prePersist
     */
    public function preUpload() {

        if (null !== $this->file1) {
            // do whatever you want to generate a unique name
            $this->images1 = uniqid() . '.' . $this->file1->guessExtension();
        }

        if (null !== $this->file2) {
            // do whatever you want to generate a unique name
            $this->images2 = uniqid() . '.' . $this->file2->guessExtension();
        }

        if (null !== $this->file3) {
            // do whatever you want to generate a unique name
            $this->images3 = uniqid() . '.' . $this->file3->guessExtension();
        }

        if (null !== $this->file4) {
            // do whatever you want to generate a unique name
            $this->images4 = uniqid() . '.' . $this->file4->guessExtension();
        }

        if (null !== $this->file5) {
            // do whatever you want to generate a unique name
            $this->images5 = uniqid() . '.' . $this->file5->guessExtension();
        }
    }

    /**
     * @ORM\postPersist
     */
    public function upload() {
        if (null === $this->images1) {
            return;
        }
        $this->file1->move($this->getUploadRootDir(), $this->images1);
        unset($this->images1);

        if (null === $this->images2) {
            return;
        }
        $this->file2->move($this->getUploadRootDir(), $this->images2);
        unset($this->images2);

        if (null === $this->images3) {
            return;
        }
        $this->file3->move($this->getUploadRootDir(), $this->images3);
        unset($this->images3);

        if (null === $this->images4) {
            return;
        }
        $this->file4->move($this->getUploadRootDir(), $this->images4);
        unset($this->images4);

        if (null === $this->images5) {
            return;
        }
        $this->file5->move($this->getUploadRootDir(), $this->images5);
        unset($this->images5);
    }

    /**
     * @ORM\postRemove
     */
    public function removeUpload() {

        if ($this->images1 = $this->getAbsolutePath()) {
            unlink($this->images1);
        }

        if ($this->images2 = $this->getAbsolutePath()) {
            unlink($this->images2);
        }
        
                if ($this->images3 = $this->getAbsolutePath()) {
            unlink($this->images4);
        }
        
                if ($this->images4 = $this->getAbsolutePath()) {
            unlink($this->images4);
        }
        
                if ($this->images5 = $this->getAbsolutePath()) {
            unlink($this->images5);
        }
    }

    /**
     * Get image
     *
     * @return string 
     */
    public function getImages() {
        return $this->images;
    }

    /**
     * Set image
     *
     * @param string $image
     */
    public function setImages($images) {
        $this->images = $images;
    }

    /**
     * Set images1
     *
     * @param string $images1
     * @return Racconti
     */
    public function setImages1($images1) {
        $this->images1 = $images1;

        return $this;
    }

    /**
     * Get images1
     *
     * @return string 
     */
    public function getImages1() {
        return $this->images1;
    }

}